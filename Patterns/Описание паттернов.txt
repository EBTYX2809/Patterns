1. Фабричный метод(Fabric method) - порождающий паттерн, создающий объекты с помощью фабрик. 
В конструкторе лучше инициализировать только простые поля.
Более сложные процессы выносить в фабрику.

2. Абстрактная фабрика(Abstract fabric) - то же самое, только создает группу объектов с помощью тех же локальных фабрик.

3. Стратегия(Strategy) - поведенческий паттерн, позволяющий настроить сигнатуру метода у объекта в зависимости от того,
какого типа сторонний объект вызывает этот метод. Так же помогает избавится от if else каши.

4. Наблюдатель(Observer) - поведенческий паттерн, позволяющий реализовывать событийные модели вручную под свои задачи.
В отличии от event типа Action или Func дает возможность тонкого ручного конторя всех подписчиков на событие.

5. Декоратор(Decorator) - структурный паттерн, позволяет наращивать функционал/логику/поведение у объекта,
подключая к нему новых его наследников, не меняя его оригинального поведения. Может быть реализован альтернативно.
		Когда декоратор реально полезен?
	1) Если нужно работать именно с текущим слоем обертки
	В твоем же примере EnchantedArmor можно удобно ссылаться на BaseArmor, но неудобно получать другие модификации. 
	А вот если нужно только модифицировать поведение одной конкретной обертки, то декоратор хорош.
	
	2) Когда неизвестно, какие будут обертки
	Например, ты получаешь объект и не знаешь, какие у него уже есть модификации. 
	Декоратор позволяет просто обернуть его новой функциональностью без изменения кода базового класса или других модификаторов.
	
	3) Если важна строгая последовательность обработки
	Когда критично, в каком порядке вызываются модификации (как в обработке сетевых пакетов или шифрования).
	
	4) Когда нужно динамически заменять логику
	В отличие от жестко фиксированных коллекций, можно просто создать новый объект-декоратор, передав в него старый. 
	Это удобно, когда надо на лету менять функциональность (например, добавлять временные баффы).

6. Синглтон(Singleton) - порождающий паттерн, который улучшает классический статик, убирая его минусы,
в виде отсутствия возможности наследования и реализации свойств, оставляя главный плюс, доступность его объекта по всему неймспейсу.

7. Фасад(Facade) - структурный паттерн, который просто упрощает клиентский код, засовывая сложную логику класса в 1 метод для клиента.

8. Прототип(Prototype) - порождающий паттерн, который позволяет создавать новые объекты без конструктора, копированием другого.

9. Строитель(Builder) - порождающий паттерн, надстройка над фабрикой, который выносит инициализацию отдельных компонентнов(полей) объекта
в отдельные методы. В отличии от фабрики, разные строители создают объект одного и того же класса.
Строитель особенно полезен, когда объект имеет много параметров, часть из которых необязательны, делаем для них разные методы сборки.

10. Команда (Command) – поведенческий паттерн, который превращает запрос (действие) пользователя в отдельный объект(комманду).
Это позволяет откладывать, сохранять, комбинировать команды (макросы) и поддерживать отмену действий (Undo/Redo).

11. Адаптер(Adapter) - структурный паттерн, позволяющий адапировать старый класс, недоступный для изменения, под новый интерфейс.

Х. Снимок (Memento) – используется для сохранения и отката состояния объекта. 
Полезен, если ты делаешь редактор с возможностью отмены действий, но в играх его заменяют системы сохранений.